{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/gundy/Documents/projects/MI-449/MI-449-css-spacing-and-layout/lib/email.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { createContext, useContext, useEffect, useReducer, useState } from 'react';\nimport emailjs from 'emailjs-com';\nconst initialState = {\n  senderName: '',\n  senderEmail: '',\n  subject: '',\n  message: ''\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'NAME':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        senderName: action.payload\n      });\n\n    case 'EMAIL':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        senderEmail: action.payload\n      });\n\n    case 'SUBJECT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        subject: action.payload\n      });\n\n    case 'MESSAGE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        message: action.payload\n      });\n\n    case 'RESET':\n      return initialState;\n  }\n};\n\nconst EmailContext = /*#__PURE__*/createContext(null);\nexport const EmailProvider = ({\n  children\n}) => {\n  const email = useEmailProvider();\n  return /*#__PURE__*/_jsxDEV(EmailContext.Provider, {\n    value: email,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\nexport const useEmail = () => {\n  return useContext(EmailContext);\n};\n\nconst useEmailProvider = () => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, initialState);\n  const {\n    0: success,\n    1: setSuccess\n  } = useState(false);\n\n  const sendEmail = async e => {\n    e.preventDefault();\n    emailjs.send(process.env.NEXT_PUBLIC_EMAIL_SERVICE_ID, process.env.NEXT_PUBLIC_TEMPLATE_ID, _objectSpread({}, state), process.env.NEXT_PUBLIC_EMAIL_USER_ID).then(() => {\n      setSuccess(true);\n    });\n    dispatch({\n      type: 'RESET'\n    });\n  };\n\n  useEffect(() => {\n    if (success) {\n      setTimeout(() => setSuccess(false), 10000);\n    }\n  }, [success]);\n  const {\n    senderName,\n    senderEmail,\n    subject,\n    message\n  } = state;\n  return {\n    senderName,\n    senderEmail,\n    subject,\n    message,\n    dispatch,\n    sendEmail,\n    success,\n    setSuccess\n  };\n};","map":{"version":3,"sources":["/home/gundy/Documents/projects/MI-449/MI-449-css-spacing-and-layout/lib/email.tsx"],"names":["React","createContext","useContext","useEffect","useReducer","useState","emailjs","initialState","senderName","senderEmail","subject","message","reducer","state","action","type","payload","EmailContext","EmailProvider","children","email","useEmailProvider","useEmail","dispatch","success","setSuccess","sendEmail","e","preventDefault","send","process","env","NEXT_PUBLIC_EMAIL_SERVICE_ID","NEXT_PUBLIC_TEMPLATE_ID","NEXT_PUBLIC_EMAIL_USER_ID","then","setTimeout"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,SAA3C,EAAsDC,UAAtD,EAAkEC,QAAlE,QAAkF,OAAlF;AACA,OAAOC,OAAP,MAAoB,aAApB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,EADO;AAEnBC,EAAAA,WAAW,EAAE,EAFM;AAGnBC,EAAAA,OAAO,EAAE,EAHU;AAInBC,EAAAA,OAAO,EAAE;AAJU,CAArB;;AAOA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,MAAL;AACE,6CAAYF,KAAZ;AAAmBL,QAAAA,UAAU,EAAEM,MAAM,CAACE;AAAtC;;AACF,SAAK,OAAL;AACE,6CAAYH,KAAZ;AAAmBJ,QAAAA,WAAW,EAAEK,MAAM,CAACE;AAAvC;;AACF,SAAK,SAAL;AACE,6CAAYH,KAAZ;AAAmBH,QAAAA,OAAO,EAAEI,MAAM,CAACE;AAAnC;;AACF,SAAK,SAAL;AACE,6CAAYH,KAAZ;AAAmBF,QAAAA,OAAO,EAAEG,MAAM,CAACE;AAAnC;;AACF,SAAK,OAAL;AACE,aAAOT,YAAP;AAVJ;AAYD,CAbD;;AAeA,MAAMU,YAAY,gBAAGhB,aAAa,CAAC,IAAD,CAAlC;AAEA,OAAO,MAAMiB,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC7C,QAAMC,KAAK,GAAGC,gBAAgB,EAA9B;AACA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAED,KAA9B;AAAA,cAAsCD;AAAtC;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CALM;AAOP,OAAO,MAAMG,QAAQ,GAAG,MAAM;AAC5B,SAAOpB,UAAU,CAACe,YAAD,CAAjB;AACD,CAFM;;AAIP,MAAMI,gBAAgB,GAAG,MAAM;AAC7B,QAAM;AAAA,OAACR,KAAD;AAAA,OAAQU;AAAR,MAAoBnB,UAAU,CAACQ,OAAD,EAAUL,YAAV,CAApC;AACA,QAAM;AAAA,OAACiB,OAAD;AAAA,OAAUC;AAAV,MAAwBpB,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMqB,SAAS,GAAG,MAAOC,CAAP,IAA8B;AAC9CA,IAAAA,CAAC,CAACC,cAAF;AACAtB,IAAAA,OAAO,CACJuB,IADH,CAEIC,OAAO,CAACC,GAAR,CAAYC,4BAFhB,EAGIF,OAAO,CAACC,GAAR,CAAYE,uBAHhB,oBAISpB,KAJT,GAKIiB,OAAO,CAACC,GAAR,CAAYG,yBALhB,EAOGC,IAPH,CAOQ,MAAM;AACVV,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD,KATH;AAUAF,IAAAA,QAAQ,CAAC;AAAER,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACD,GAbD;;AAeAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIqB,OAAJ,EAAa;AACXY,MAAAA,UAAU,CAAC,MAAMX,UAAU,CAAC,KAAD,CAAjB,EAA0B,KAA1B,CAAV;AACD;AACF,GAJQ,EAIN,CAACD,OAAD,CAJM,CAAT;AAMA,QAAM;AAAEhB,IAAAA,UAAF;AAAcC,IAAAA,WAAd;AAA2BC,IAAAA,OAA3B;AAAoCC,IAAAA;AAApC,MAAgDE,KAAtD;AAKA,SAAO;AACLL,IAAAA,UADK;AAELC,IAAAA,WAFK;AAGLC,IAAAA,OAHK;AAILC,IAAAA,OAJK;AAKLY,IAAAA,QALK;AAMLG,IAAAA,SANK;AAOLF,IAAAA,OAPK;AAQLC,IAAAA;AARK,GAAP;AAUD,CAxCD","sourcesContent":["import React, { createContext, useContext, useEffect, useReducer, useState } from 'react';\nimport emailjs from 'emailjs-com';\n\nconst initialState = {\n  senderName: '',\n  senderEmail: '',\n  subject: '',\n  message: '',\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'NAME':\n      return { ...state, senderName: action.payload };\n    case 'EMAIL':\n      return { ...state, senderEmail: action.payload };\n    case 'SUBJECT':\n      return { ...state, subject: action.payload };\n    case 'MESSAGE':\n      return { ...state, message: action.payload };\n    case 'RESET':\n      return initialState;\n  }\n};\n\nconst EmailContext = createContext(null);\n\nexport const EmailProvider = ({ children }) => {\n  const email = useEmailProvider();\n  return (\n    <EmailContext.Provider value={email}>{children}</EmailContext.Provider>\n  );\n};\n\nexport const useEmail = () => {\n  return useContext(EmailContext);\n};\n\nconst useEmailProvider = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [success, setSuccess] = useState(false);\n\n  const sendEmail = async (e: React.FormEvent) => {\n    e.preventDefault();\n    emailjs\n      .send(\n        process.env.NEXT_PUBLIC_EMAIL_SERVICE_ID,\n        process.env.NEXT_PUBLIC_TEMPLATE_ID,\n        { ...state },\n        process.env.NEXT_PUBLIC_EMAIL_USER_ID\n      )\n      .then(() => {\n        setSuccess(true);\n      });\n    dispatch({ type: 'RESET' });\n  };\n\n  useEffect(() => {\n    if (success) {\n      setTimeout(() => setSuccess(false), 10000)\n    }\n  }, [success])\n  \n  const { senderName, senderEmail, subject, message } = state;\n\n\n\n\n  return {\n    senderName,\n    senderEmail,\n    subject,\n    message,\n    dispatch,\n    sendEmail,\n    success,\n    setSuccess\n  };\n};\n"]},"metadata":{},"sourceType":"module"}
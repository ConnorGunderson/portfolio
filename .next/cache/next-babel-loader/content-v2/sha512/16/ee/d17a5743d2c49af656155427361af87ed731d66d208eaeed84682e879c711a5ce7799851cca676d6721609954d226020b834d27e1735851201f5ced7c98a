{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useContext, useEffect, useRef, useState } from 'react';\nvar ObserverContext = /*#__PURE__*/createContext(null);\nexport var ObserverProvider = function ObserverProvider(_ref) {\n  var children = _ref.children;\n  var observer = useObserverProvider();\n  return /*#__PURE__*/_jsx(ObserverContext.Provider, {\n    value: observer,\n    children: children\n  });\n};\nexport var useObserver = function useObserver() {\n  return useContext(ObserverContext);\n};\n\nvar useObserverProvider = function useObserverProvider() {\n  var _useState = useState(true),\n      isVisible = _useState[0],\n      setVisible = _useState[1];\n\n  var ref = useRef(null);\n  useEffect(function () {\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        return setVisible(entry.isIntersecting);\n      });\n    });\n\n    if (ref.current) {\n      observer.observe(ref.current);\n      return function () {\n        return observer.unobserve(ref.current);\n      };\n    }\n  }, [ref]);\n  useEffect(function () {\n    if (isVisible && ref.current) {\n      ref.current.classList.add('fade-in');\n    }\n  }, [isVisible]);\n  return {\n    ref: ref,\n    isVisible: isVisible\n  };\n};","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { createContext, useContext, useEffect, useReducer, useState } from 'react';\nimport emailjs from 'emailjs-com';\nconst initialState = {\n  senderName: '',\n  senderEmail: '',\n  subject: '',\n  message: ''\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'NAME':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        senderName: action.payload\n      });\n\n    case 'EMAIL':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        senderEmail: action.payload\n      });\n\n    case 'SUBJECT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        subject: action.payload\n      });\n\n    case 'MESSAGE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        message: action.payload\n      });\n\n    case 'RESET':\n      return initialState;\n  }\n};\n\nconst EmailContext = /*#__PURE__*/createContext(null);\nexport const EmailProvider = ({\n  children\n}) => {\n  const email = useEmailProvider();\n  return /*#__PURE__*/_jsx(EmailContext.Provider, {\n    value: email,\n    children: children\n  });\n};\nexport const useEmail = () => {\n  return useContext(EmailContext);\n};\n\nconst useEmailProvider = () => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, initialState);\n  const {\n    0: success,\n    1: setSuccess\n  } = useState(false);\n\n  const sendEmail = async e => {\n    e.preventDefault();\n    emailjs.send(process.env.NEXT_PUBLIC_EMAIL_SERVICE_ID, process.env.NEXT_PUBLIC_TEMPLATE_ID, _objectSpread({}, state), process.env.NEXT_PUBLIC_EMAIL_USER_ID).then(() => {\n      setSuccess(true);\n    });\n    dispatch({\n      type: 'RESET'\n    });\n  };\n\n  useEffect(() => {\n    if (success) {\n      setTimeout(() => setSuccess(false), 10000);\n    }\n  }, [success]);\n  const {\n    senderName,\n    senderEmail,\n    subject,\n    message\n  } = state;\n  return {\n    senderName,\n    senderEmail,\n    subject,\n    message,\n    dispatch,\n    sendEmail,\n    success,\n    setSuccess\n  };\n};","map":null,"metadata":{},"sourceType":"module"}
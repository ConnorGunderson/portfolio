{"ast":null,"code":"import _regeneratorRuntime from \"/home/gundy/Documents/projects/MI-449/MI-449-css-spacing-and-layout/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/gundy/Documents/projects/MI-449/MI-449-css-spacing-and-layout/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _defineProperty from \"/home/gundy/Documents/projects/MI-449/MI-449-css-spacing-and-layout/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { createContext, useContext, useEffect, useReducer, useState } from 'react';\nimport emailjs from 'emailjs-com';\nvar initialState = {\n  senderName: '',\n  senderEmail: '',\n  subject: '',\n  message: ''\n};\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case 'NAME':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        senderName: action.payload\n      });\n\n    case 'EMAIL':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        senderEmail: action.payload\n      });\n\n    case 'SUBJECT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        subject: action.payload\n      });\n\n    case 'MESSAGE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        message: action.payload\n      });\n\n    case 'RESET':\n      return initialState;\n  }\n};\n\nvar EmailContext = /*#__PURE__*/createContext(null);\nexport var EmailProvider = function EmailProvider(_ref) {\n  var children = _ref.children;\n  var email = useEmailProvider();\n  return /*#__PURE__*/_jsx(EmailContext.Provider, {\n    value: email,\n    children: children\n  });\n};\nexport var useEmail = function useEmail() {\n  return useContext(EmailContext);\n};\n\nvar useEmailProvider = function useEmailProvider() {\n  var _useReducer = useReducer(reducer, initialState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var _useState = useState(false),\n      success = _useState[0],\n      setSuccess = _useState[1];\n\n  var sendEmail = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              emailjs.send(process.env.NEXT_PUBLIC_EMAIL_SERVICE_ID, process.env.NEXT_PUBLIC_TEMPLATE_ID, _objectSpread({}, state), process.env.NEXT_PUBLIC_EMAIL_USER_ID).then(function () {\n                setSuccess(true);\n              });\n              dispatch({\n                type: 'RESET'\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function sendEmail(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    if (success) {\n      setTimeout(function () {\n        return setSuccess(false);\n      }, 10000);\n    }\n  }, [success]);\n  var senderName = state.senderName,\n      senderEmail = state.senderEmail,\n      subject = state.subject,\n      message = state.message;\n  return {\n    senderName: senderName,\n    senderEmail: senderEmail,\n    subject: subject,\n    message: message,\n    dispatch: dispatch,\n    sendEmail: sendEmail,\n    success: success,\n    setSuccess: setSuccess\n  };\n};","map":null,"metadata":{},"sourceType":"module"}
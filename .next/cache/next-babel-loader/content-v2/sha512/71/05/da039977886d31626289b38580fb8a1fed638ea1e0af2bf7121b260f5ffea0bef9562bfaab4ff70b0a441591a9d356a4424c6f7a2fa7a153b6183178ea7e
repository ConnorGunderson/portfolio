{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/gundy/Documents/projects/MI-449/MI-449-css-spacing-and-layout/utils/intersection-observer.tsx\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useRef, useState } from 'react';\nvar ObserverContext = /*#__PURE__*/createContext(null);\nexport var ObserverProvider = function ObserverProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n  var observer = useObserverProvider();\n  return /*#__PURE__*/_jsxDEV(ObserverContext.Provider, {\n    value: observer,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(ObserverProvider, \"P3Rg6SlYklyKgrhX+iA5RWxA3AI=\", false, function () {\n  return [useObserverProvider];\n});\n\n_c = ObserverProvider;\nexport var useObserver = function useObserver() {\n  _s2();\n\n  return useContext(ObserverContext);\n};\n\n_s2(useObserver, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar useObserverProvider = function useObserverProvider() {\n  _s3();\n\n  var _useState = useState(true),\n      isVisible = _useState[0],\n      setVisible = _useState[1];\n\n  var ref = useRef(null);\n  useEffect(function () {\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        return setVisible(entry.isIntersecting);\n      });\n    });\n\n    if (ref.current) {\n      observer.observe(ref.current);\n      return function () {\n        return observer.unobserve(ref.current);\n      };\n    }\n  }, [ref]);\n  useEffect(function () {\n    if (ref.current) {\n      if (isVisible) {\n        ref.current.classList.add('fade-in');\n      } else {\n        ref.currnet.classList.add('invisible');\n      }\n    }\n  }, [isVisible]);\n  return {\n    ref: ref,\n    isVisible: isVisible\n  };\n};\n\n_s3(useObserverProvider, \"x4hYRI9WYMbBWLtXUrn9RoE4riI=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ObserverProvider\");","map":{"version":3,"sources":["/home/gundy/Documents/projects/MI-449/MI-449-css-spacing-and-layout/utils/intersection-observer.tsx"],"names":["createContext","useContext","useEffect","useRef","useState","ObserverContext","ObserverProvider","children","observer","useObserverProvider","useObserver","isVisible","setVisible","ref","IntersectionObserver","entries","forEach","entry","isIntersecting","current","observe","unobserve","classList","add","currnet"],"mappings":";;;;;;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,SAApC,EAA+CC,MAA/C,EAAuDC,QAAvD,QAAuE,OAAvE;AAEA,IAAMC,eAAe,gBAAGL,aAAa,CAAC,IAAD,CAArC;AAEA,OAAO,IAAMM,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAkB;AAAA;;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAChD,MAAMC,QAAQ,GAAGC,mBAAmB,EAApC;AACA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAED,QAAjC;AAAA,cACGD;AADH;AAAA;AAAA;AAAA;AAAA,WADF;AAKD,CAPM;;GAAMD,gB;UACMG,mB;;;KADNH,gB;AASb,OAAO,IAAMI,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA;;AAC/B,SAAOT,UAAU,CAACI,eAAD,CAAjB;AACD,CAFM;;IAAMK,W;;AAIb,IAAMD,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAAA;;AAAA,kBACAL,QAAQ,CAAC,IAAD,CADR;AAAA,MACzBO,SADyB;AAAA,MACdC,UADc;;AAEhC,MAAMC,GAAG,GAAGV,MAAM,CAAC,IAAD,CAAlB;AACAD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMM,QAAQ,GAAG,IAAIM,oBAAJ,CAAyB,UAACC,OAAD,EAAa;AAErDA,MAAAA,OAAO,CAACC,OAAR,CAAgB,UAACC,KAAD;AAAA,eAAWL,UAAU,CAACK,KAAK,CAACC,cAAP,CAArB;AAAA,OAAhB;AACD,KAHgB,CAAjB;;AAIA,QAAIL,GAAG,CAACM,OAAR,EAAiB;AACfX,MAAAA,QAAQ,CAACY,OAAT,CAAiBP,GAAG,CAACM,OAArB;AACA,aAAO;AAAA,eAAMX,QAAQ,CAACa,SAAT,CAAmBR,GAAG,CAACM,OAAvB,CAAN;AAAA,OAAP;AACD;AACF,GATQ,EASN,CAACN,GAAD,CATM,CAAT;AAWAX,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIW,GAAG,CAACM,OAAR,EAAiB;AACf,UAAIR,SAAJ,EAAe;AACbE,QAAAA,GAAG,CAACM,OAAJ,CAAYG,SAAZ,CAAsBC,GAAtB,CAA0B,SAA1B;AACD,OAFD,MAEO;AACLV,QAAAA,GAAG,CAACW,OAAJ,CAAYF,SAAZ,CAAsBC,GAAtB,CAA0B,WAA1B;AACD;AACF;AACF,GARQ,EAQN,CAACZ,SAAD,CARM,CAAT;AAUA,SAAO;AACLE,IAAAA,GAAG,EAAHA,GADK;AAELF,IAAAA,SAAS,EAATA;AAFK,GAAP;AAID,CA5BD;;IAAMF,mB","sourcesContent":["import { createContext, useContext, useEffect, useRef, useState } from 'react';\n\nconst ObserverContext = createContext(null);\n\nexport const ObserverProvider = ({ children }) => {\n  const observer = useObserverProvider();\n  return (\n    <ObserverContext.Provider value={observer}>\n      {children}\n    </ObserverContext.Provider>\n  );\n};\n\nexport const useObserver = () => {\n  return useContext(ObserverContext);\n};\n\nconst useObserverProvider = () => {\n  const [isVisible, setVisible] = useState(true);\n  const ref = useRef(null);\n  useEffect(() => {\n    const observer = new IntersectionObserver((entries) => {\n      \n      entries.forEach((entry) => setVisible(entry.isIntersecting));\n    });\n    if (ref.current) {\n      observer.observe(ref.current);\n      return () => observer.unobserve(ref.current);\n    }\n  }, [ref]);\n\n  useEffect(() => {\n    if (ref.current) {\n      if (isVisible) {\n        ref.current.classList.add('fade-in');\n      } else {\n        ref.currnet.classList.add('invisible')\n      }\n    } \n  }, [isVisible]);\n\n  return {\n    ref,\n    isVisible,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}
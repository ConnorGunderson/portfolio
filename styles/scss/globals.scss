.fade-in * {
  animation: fade-in 1000ms ease-out;
}

@keyframes fade-in {
  from {
    opacity: 25%;
  }
  to {
    opacity: 100%;
  }
}

/* intersection observer fade-in */

.fade-in-section {
  opacity: 0;
  transform: translateY(-20vh);
  visibility: hidden;
  transition: opacity 0.6s ease-out, transform 1.2s ease-out;
  will-change: opacity, visibility;
}

.fade-in-section.is-visible {
  opacity: 1;
  transform: none;
  visibility: visible;
}

.skill-slider {
  animation: skill-slider 2s linear infinite;
}

@keyframes skill-slider {
  from {
    transform: translateX(-100px);
  } 
  to {
    transform: translateX(100px);
  }
}

button:active {
  transform: scale3d(105px);
  transform: translateY(-3px);
}

.circle-container {
  $particleNum: 200;
  position: absolute;
  animation-iteration-count: infinite;
  animation-timing-function: linear;
  transform: translate(-10vh);
  mask-image: radial-gradient(
    white 0%,
    white 40%,
    transparent 80%,
    transparent
  );

  .circle {
    width: 100%;
    height: 100%;
    border-radius: 50%;
    mix-blend-mode: screen;
    $color: random(20);
    background-image: radial-gradient(
      #a6caa2,
      #a6caa2 30%,
      hsla(273, 100%, 78%, 0) 56%
    );

    animation: fadein-frames 150ms infinite, scale-frames 2s infinite;

    @keyframes fade-frames {
      0% {
        opacity: 1;
      }

      50% {
        opacity: 0.7;
      }

      100% {
        opacity: 1;
      }
    }
    $scale: random(2) + .7;

    @keyframes scale-frames {
      0% {
        transform: scale3d(0.4, 0.4, 1);
      }
      50% {
        transform: scale3d($scale, $scale, 1);
      }
      100% {
        transform: scale3d(0.4, 0.4, 1);
      }
    }
  }

  $particleBaseSize: 8;

  
  @for $i from 1 through $particleNum {
    &:nth-child(#{$i}) {
      $circleSize: random($particleBaseSize);
      width: $circleSize + px;
      height: $circleSize + px;

      $startPositionY: random(5) + 30;
      $framesName: "move-frames-" + $i;
      $moveDuration: 15000 + random(9000) + ms;

      animation-name: #{$framesName};
      animation-duration: $moveDuration;
      animation-delay: random(15000) + ms;

      @keyframes #{$framesName} {
        from {
          transform: translate3d(
            #{random(150) + vh},
            #{$startPositionY + vh},
            0
          );
        }

        to {
          transform: translate3d(
            #{random(150) + vw},
            #{- $startPositionY - random(30) + vh},
            0
          );
        }
      }

      .circle {
        animation-delay: random(1000) + ms;
      }
    }
  }
}